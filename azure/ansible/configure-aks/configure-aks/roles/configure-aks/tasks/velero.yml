- name: Set fact for velero tempdir
  set_fact:
    veleroTempDir: "/tmp/velero-{{ ansible_date_time.iso8601_basic_short }}"
  tags:
    - velero

- name: Get kubernetes-backup secret from KeyVault
  shell: "az keyvault secret show --vault kv-{{ environmentShort }}-{{ locationShort }}-{{ configuration.coreResourceGroupName }} --name kubernetes-backup --output json"
  register: kubernetesBackupSecret
  tags:
    - velero

- name: Download and apply helm template
  block:
    - name: Add velero namespace
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ configuration.velero.namespace }}"
            labels: "{{ configuration.velero.labels | combine({'name': configuration.velero.namespace}) }}"
      when: configuration.velero.state == "present"
      register: veleroNamespace
      retries: 20
      delay: 5
      until: veleroNamespace is succeeded
      tags:
        - velero

    - name: Create velero configuration variable
      set_fact:
        veleroSecretConfiguration:
          AZURE_SUBSCRIPTION_ID: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_SUBSCRIPTION_ID }}"
          AZURE_TENANT_ID: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_TENANT_ID }}"
          AZURE_CLIENT_ID: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_CLIENT_ID }}"
          AZURE_CLIENT_SECRET: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_CLIENT_SECRET }}"
          AZURE_RESOURCE_GROUP: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_RESOURCE_GROUP }}"
          AZURE_CLOUD_NAME: "AzurePublicCloud"
        veleroConfig:
          AZURE_RESOURCE_GROUP: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_RESOURCE_GROUP }}"
          AZURE_STORAGE_ACCOUNT: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_STORAGE_ACCOUNT }}"
          AZURE_STORAGE_ACCOUNT_CONTAINER: "{{ ((kubernetesBackupSecret.stdout | from_json).value | b64decode | from_json).AZURE_STORAGE_ACCOUNT_CONTAINER }}"
      tags:
        - velero

    - name: Helm repo add vmware-tanzu
      shell: "{{ helm.binDir }}/helmv3 repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts"
      tags:
        - velero

    - name: Helm repo update
      shell: "{{ helm.binDir }}/helmv3 repo update"
      tags:
        - velero

    - name: Install velero
      shell: '{{ helm.binDir }}/helmv3 --kubeconfig="{{ configuration.k8sconfiguration.dest }}" upgrade --wait --install --namespace {{ configuration.velero.namespace }} --set configuration.logLevel=warning --set configuration.provider=azure --set configuration.backupStorageLocation.name=default --set configuration.backupStorageLocation.bucket={{ veleroConfig.AZURE_STORAGE_ACCOUNT_CONTAINER }} --set configuration.backupStorageLocation.config.resourceGroup={{ veleroConfig.AZURE_RESOURCE_GROUP }} --set configuration.backupStorageLocation.config.storageAccount={{ veleroConfig.AZURE_STORAGE_ACCOUNT }} --set snapshotsEnable=false --set image.repository=velero/velero --set image.tag={{ configuration.velero.version }} --set image.pullPolicy=IfNotPresent --set initContainers[0].name=velero-plugin-for-microsoft-azure --set initContainers[0].image=velero/velero-plugin-for-microsoft-azure:{{ configuration.velero.azurePluginVersion }} --set initContainers[0].volumeMounts[0].mountPath=/target --set initContainers[0].volumeMounts[0].name=plugins velero vmware-tanzu/velero'
      register: veleroInstallResult
      when: configuration.velero.state == "present"
      tags:
        - velero

    - name: Create secret for velero to Azure
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: "{{ configuration.velero.state }}"
        namespace: "{{ configuration.velero.namespace }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: velero
          type: Opaque
          data:
            cloud: "{{ veleroSecretConfiguration | to_nice_yaml | b64encode }}"
      tags:
        - velero

    - name: Restart velero deployment
      shell: '{{ kubectl.bin_directory }}/kubectl --kubeconfig="{{ configuration.k8sconfiguration.dest }}" --namespace={{ configuration.velero.namespace }} rollout restart deployment velero'
      when: configuration.velero.state == "present"
      tags:
        - velero

    - name: Configure daily full backups
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: "{{ configuration.velero.state }}"
        namespace: "{{ configuration.velero.namespace }}"
        definition:
          apiVersion: velero.io/v1
          kind: Schedule
          metadata:
            name: daily-full-backups
            labels:
              frequency: daily
              full: "true"
          spec:
            schedule: "0 2 * * *"
            template:
              ttl: 960h0m0s
      tags:
        - velero

    - name: Configure hourly minimal backups
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: "{{ configuration.velero.state }}"
        namespace: "{{ configuration.velero.namespace }}"
        definition:
          apiVersion: velero.io/v1
          kind: Schedule
          metadata:
            name: hourly-minimal-backups
            labels:
              frequency: hourly
              full: "false"
          spec:
            schedule: "15 */1 * * *"
            template:
              snapshotVolumes: false
              ttl: 960h0m0s
      tags:
        - velero

    - name: Remove velero
      shell: '{{ helm.binDir }}/helmv3 --kubeconfig="{{ configuration.k8sconfiguration.dest }}" --namespace {{ configuration.velero.namespace }} uninstall velero'
      when: configuration.velero.state == "absent"
      tags:
        - velero

    - name: Remove velero namespace
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: absent
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ configuration.velero.namespace }}"
      when: configuration.velero.state == "absent"
      tags:
        - velero

    - name: Delete temporary local folder
      file:
        path: "{{ veleroTempDir }}/"
        state: absent
      changed_when: false
      tags:
        - velero

  rescue:
    - name: Delete temporary local folder
      file:
        path: "{{ veleroTempDir }}/"
        state: absent
      changed_when: false
      tags:
        - velero

    - name: Fail task
      fail:
        msg: "Rescue was invoked, task failed."
      tags:
        - velero
